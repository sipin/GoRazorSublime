# [PackageDev] target_format: plist, ext: tmLanguage
name: GoRazor
scopeName: text.html.gohtml
fileTypes: [gohtml]
uuid: 65e21840-02e5-11e4-9191-0800200c9a66

patterns:
- comment: <text></text> content tags
  begin: (<text>)
  beginCaptures:
    '1': {name: entity.name.textblock.gohtml}
  end: (</text>)
  endCaptures:
    '1': {name: entity.name.textblock.gohtml}
  patterns:
  - include: $self

- comment: special html tags
  begin: (\<head\>|\<html\>|\<body\>)
  beginCaptures:
    '1': {name: entity.name.special.opening.gohtml}
  end:  ((\</head\>|\</html\>|\</body\>))
  endCaptures:
    '1': {name: entity.name.special.closing.gohtml}
  patterns:
  - include: $self

- comment: handle gohtml inside html
  begin: (\<[a-zA-Z0-9]+)
  beginCaptures:
    '1': {name: entity.name.begin.html.gohtml}
  end: (\<)?(/)([a-zA-Z0-9\-]+)?(\>)
  endCaptures:
    '1': {name: entity.name.end.html.gohtml}
    '2': {name: entity.name.end.slash.html.gohtml}
    '3': {name: entity.name.end.html.gohtml}
    '4': {name: entity.name.end.html.gohtml}
  patterns:
  - comment: attribute
    match: ([a-zA-Z0-9\-]+\=)(?=[\'\"\@])
    name: entity.name.attribute.gohtml

  - comment: single quotes
    name: text.basic.gohtml
    begin: (?<=\=)(\')
    beginCaptures:
      '1': {name: string.quoted.single.gohtml}
    end: (\')
    endCaptures:
      '1': {name: string.quoted.single.gohtml}
    patterns:
    - include: $self
    - match: .
      name: string.quoted.single.gohtml
  - comment: double quotes
    name: text.basic.gohtml
    begin: (?<=\=)(\")
    beginCaptures:
      '1': {name: string.quoted.double.gohtml}
    end: (\")
    endCaptures:
      '1': {name: string.quoted.double.gohtml}
    patterns:
    - include: $self
    - match: .
      name: string.quoted.double.gohtml
  
  - comment: innerHTML
    begin: (\>)
    beginCaptures:
      '1': {name: entity.name.begin.closing.gohtml}
    end: (\<[a-zA-Z0-9]*)
    endCaptures:
      '1': {name: entity.name.end.opeing.gohtml}
    patterns:
    - include: $self
    
  - comment: swallow quotes
    match: \'|\"
  - include: $self
  - include: text.html.basic
  - include: source.go

- comment: code block
  name: source.go
  begin: (@\{)
  beginCaptures:
    '1': {name: support.class.gohtml}
  end: ^[\t ]*\}$
  endCaptures:
    '0': {name: support.class.gohtml}
  contentName: source.go
  patterns:
  - include: "#block"
  - include: source.go

- comment: transition brace
  name: source.go
  begin: (@)?((if|for|switch|section) )([^\{\n]+)(\{)
  beginCaptures:
    '1': {name: support.class.gohtml}
    '3': {name: keyword.control.go}
    '4': {name: source.go}
    '5': {name: support.class.gohtml}
  end: \}
  endCaptures:
    '0': {name: support.class.gohtml}
  patterns:
  - include: $self
  - include: source.go

- comment: Multi-line Comments
  name: comment.line.gohtml
  begin: (@\*)
  end: (\*@)

- comment: Escaped transition character
  name: string.regexp
  match: '@@'

- comment: \@(variable expression)
  name: source.go
  begin: (@\()
  beginCaptures:
    '1': {name: support.class.gohtml}
  end: (\))
  endCaptures:
    '1': {name: support.class.gohtml}
  patterns:
  - include: "#function"

- comment: \@module.func(....)
  begin: (\@)([a-zA-Z\.]+)(\()
  beginCaptures:
    '1': {name: support.class.gohtml}
    '2': {name: support.class.gohtml}
    '3': {name: support.class.gohtml}
  end: (\))
  endCaptures:
    '1': {name: support.class.gohtml}
  patterns:
  - include: "#function"
  - include: '#string.quoted.double.go'

- comment: \@variable
  name: source.go
  begin: (\@)([a-zA-Z\.]+)
  beginCaptures:
    '1': {name: support.class.gohtml}
    '2': {name: support.class.gohtml}
  end: (\b)

# - comment: transition brace
#   name: condition.go
#   begin: (@)
#   beginCaptures:
#     '1': {name: support.class.gohtml}
#   end: (\{)
#   patterns:
#   - include: source.go

- include: text.html.basic

repository:
  block:
    comment: code block
    begin: \{
    beginCaptures:
      '0': {name: source.go}
    end: ^[\t ]*\}[\t ]*$
    endCaptures:
      '0': {name: source.go}
    contentName: source.go
    patterns:
    - include: source.go
    
  function:
    begin: ([a-zA-Z]+)(\()
    beginCaptures:
      '1': {name: support.function.go}
    end: (\))
    patterns:
    - include: "#function"
    - include: "#method"
    - include: '#variable'

  variable:
    match: ([a-zA-Z]+)
    name: variable.other.go

  method:
    begin: ([a-zA-Z]+).([a-zA-Z]+)(\()
    beginCaptures:
      '1': {name: support.class.gohtml}
      '2': {name: support.function.go}
    end: (\))
    endCaptures:
      '1': {name: support.class.gohtml}
    patterns:
    - include: "#function"
